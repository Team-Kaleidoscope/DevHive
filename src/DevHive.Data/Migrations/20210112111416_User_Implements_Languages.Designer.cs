// <auto-generated />
using System;
using DevHive.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DevHive.Data.Migrations
{
	[DbContext(typeof(DevHiveContext))]
	[Migration("20210112111416_User_Implements_Languages")]
	partial class User_Implements_Languages
	{
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.UseIdentityByDefaultColumns()
				.HasAnnotation("Relational:MaxIdentifierLength", 63)
				.HasAnnotation("ProductVersion", "5.0.1");

			modelBuilder.Entity("DevHive.Data.Models.Comment", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<Guid>("IssuerId")
						.HasColumnType("uuid");

					b.Property<string>("Message")
						.HasColumnType("text");

					b.Property<DateTime>("TimeCreated")
						.HasColumnType("timestamp without time zone");

					b.HasKey("Id");

					b.ToTable("Comments");
				});

			modelBuilder.Entity("DevHive.Data.Models.Language", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<string>("Name")
						.HasColumnType("text");

					b.Property<Guid?>("UserId")
						.HasColumnType("uuid");

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("Languages");
				});

			modelBuilder.Entity("DevHive.Data.Models.Role", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("text");

					b.Property<string>("Name")
						.HasMaxLength(256)
						.HasColumnType("character varying(256)");

					b.Property<string>("NormalizedName")
						.HasMaxLength(256)
						.HasColumnType("character varying(256)");

					b.HasKey("Id");

					b.HasIndex("NormalizedName")
						.IsUnique()
						.HasDatabaseName("RoleNameIndex");

					b.ToTable("AspNetRoles");
				});

			modelBuilder.Entity("DevHive.Data.Models.Technology", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<string>("Name")
						.HasColumnType("text");

					b.Property<Guid?>("UserId")
						.HasColumnType("uuid");

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("Technologies");
				});

			modelBuilder.Entity("DevHive.Data.Models.User", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<int>("AccessFailedCount")
						.HasColumnType("integer");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("text");

					b.Property<string>("Email")
						.HasMaxLength(256)
						.HasColumnType("character varying(256)");

					b.Property<bool>("EmailConfirmed")
						.HasColumnType("boolean");

					b.Property<string>("FirstName")
						.HasColumnType("text");

					b.Property<string>("LastName")
						.HasColumnType("text");

					b.Property<bool>("LockoutEnabled")
						.HasColumnType("boolean");

					b.Property<DateTimeOffset?>("LockoutEnd")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("NormalizedEmail")
						.HasMaxLength(256)
						.HasColumnType("character varying(256)");

					b.Property<string>("NormalizedUserName")
						.HasMaxLength(256)
						.HasColumnType("character varying(256)");

					b.Property<string>("PasswordHash")
						.HasColumnType("text");

					b.Property<string>("PhoneNumber")
						.HasColumnType("text");

					b.Property<bool>("PhoneNumberConfirmed")
						.HasColumnType("boolean");

					b.Property<string>("ProfilePictureUrl")
						.HasColumnType("text");

					b.Property<string>("SecurityStamp")
						.HasColumnType("text");

					b.Property<bool>("TwoFactorEnabled")
						.HasColumnType("boolean");

					b.Property<Guid?>("UserId")
						.HasColumnType("uuid");

					b.Property<string>("UserName")
						.HasMaxLength(256)
						.HasColumnType("character varying(256)");

					b.HasKey("Id");

					b.HasIndex("NormalizedEmail")
						.HasDatabaseName("EmailIndex");

					b.HasIndex("NormalizedUserName")
						.IsUnique()
						.HasDatabaseName("UserNameIndex");

					b.HasIndex("UserId");

					b.HasIndex("UserName")
						.IsUnique();

					b.ToTable("AspNetUsers");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.UseIdentityByDefaultColumn();

					b.Property<string>("ClaimType")
						.HasColumnType("text");

					b.Property<string>("ClaimValue")
						.HasColumnType("text");

					b.Property<Guid>("RoleId")
						.HasColumnType("uuid");

					b.HasKey("Id");

					b.HasIndex("RoleId");

					b.ToTable("AspNetRoleClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.UseIdentityByDefaultColumn();

					b.Property<string>("ClaimType")
						.HasColumnType("text");

					b.Property<string>("ClaimValue")
						.HasColumnType("text");

					b.Property<Guid>("UserId")
						.HasColumnType("uuid");

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
				{
					b.Property<string>("LoginProvider")
						.HasColumnType("text");

					b.Property<string>("ProviderKey")
						.HasColumnType("text");

					b.Property<string>("ProviderDisplayName")
						.HasColumnType("text");

					b.Property<Guid>("UserId")
						.HasColumnType("uuid");

					b.HasKey("LoginProvider", "ProviderKey");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserLogins");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
				{
					b.Property<Guid>("UserId")
						.HasColumnType("uuid");

					b.Property<Guid>("RoleId")
						.HasColumnType("uuid");

					b.HasKey("UserId", "RoleId");

					b.HasIndex("RoleId");

					b.ToTable("AspNetUserRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
				{
					b.Property<Guid>("UserId")
						.HasColumnType("uuid");

					b.Property<string>("LoginProvider")
						.HasColumnType("text");

					b.Property<string>("Name")
						.HasColumnType("text");

					b.Property<string>("Value")
						.HasColumnType("text");

					b.HasKey("UserId", "LoginProvider", "Name");

					b.ToTable("AspNetUserTokens");
				});

			modelBuilder.Entity("RoleUser", b =>
				{
					b.Property<Guid>("RolesId")
						.HasColumnType("uuid");

					b.Property<Guid>("UsersId")
						.HasColumnType("uuid");

					b.HasKey("RolesId", "UsersId");

					b.HasIndex("UsersId");

					b.ToTable("RoleUser");
				});

			modelBuilder.Entity("DevHive.Data.Models.Language", b =>
				{
					b.HasOne("DevHive.Data.Models.User", null)
						.WithMany("Languages")
						.HasForeignKey("UserId");
				});

			modelBuilder.Entity("DevHive.Data.Models.Technology", b =>
				{
					b.HasOne("DevHive.Data.Models.User", null)
						.WithMany("Technologies")
						.HasForeignKey("UserId");
				});

			modelBuilder.Entity("DevHive.Data.Models.User", b =>
				{
					b.HasOne("DevHive.Data.Models.User", null)
						.WithMany("Friends")
						.HasForeignKey("UserId");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
				{
					b.HasOne("DevHive.Data.Models.Role", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
				{
					b.HasOne("DevHive.Data.Models.User", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
				{
					b.HasOne("DevHive.Data.Models.User", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
				{
					b.HasOne("DevHive.Data.Models.Role", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("DevHive.Data.Models.User", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
				{
					b.HasOne("DevHive.Data.Models.User", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("RoleUser", b =>
				{
					b.HasOne("DevHive.Data.Models.Role", null)
						.WithMany()
						.HasForeignKey("RolesId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("DevHive.Data.Models.User", null)
						.WithMany()
						.HasForeignKey("UsersId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("DevHive.Data.Models.User", b =>
				{
					b.Navigation("Friends");

					b.Navigation("Languages");

					b.Navigation("Technologies");
				});
#pragma warning restore 612, 618
		}
	}
}
